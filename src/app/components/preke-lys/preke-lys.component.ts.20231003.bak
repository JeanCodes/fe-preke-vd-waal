import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatTableModule } from '@angular/material/table'  
import { MatDialog } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon'
  
import { ExampleDialogComponent } from './preke-lys-detail.component';

import { PrekeService } from 'src/app/services/preke.service';
import { BybelBoekeService } from 'src/app/services/bybel-boeke.service';
import { BronneService } from 'src/app/services/bronne.service';
import { TeksteService } from 'src/app/services/tekste.service';

@Component({
  selector: 'app-preke-lys',
  templateUrl: './preke-lys.component.html',
  styleUrls: ['./preke-lys.component.css']
})

export class PrekeLysComponent implements OnInit {
  
  boeke: any;
  preke: any;
  bronne: any;
  tekste: any;
  mergedPreke: any = [];
  mergedBoeke: any = [];
  mergedBronne: any = [];
  outestament: any = [];
  nuwetestament: any = [];
  belydenisse: any = [];
  tema = '';
  dataSource : any  = '';
  prekeCount: number = 0;
  
  page: number = 1;
  count: number = 0;
  tableSize: number = 10;

  filters = {
    tema: '',
    id: '',
    taal: 'Almal',
    bron: 'Almal',
    begin: 1943,
    eind: 1980,
    skandering: 'Almal',
    teksopsie: 'Almal'
  };
 
  public loading = true;

  constructor(
    private prekeService: PrekeService,
    private bybelBoekeService: BybelBoekeService,
    private bronneService: BronneService,
    private teksteService: TeksteService,
    private formBuilder: FormBuilder,
    private ReactiveFormsModule: ReactiveFormsModule,
    public dialog: MatDialog
  ) { }

  ngOnInit(): void {
    this.retrievePreke();
  }

  filterPreke() {
    console.log('About to Filter Preke');
    this.loading = true;

    for(let i=0; i < this.preke.length; i++) {
      this.mergedPreke.push({
        ...this.preke[i], 
        ...(this.tekste.find((itmInner : any) => itmInner.PreekNo === this.preke[i].PreekNo))
      });
    }
    console.log('mergedPreke: ', this.mergedPreke);
    for(let i=0; i < this.mergedPreke.length; i++) {
      this.mergedBoeke.push({
        ...this.mergedPreke[i],
        ...(this.boeke.find((itmInner : any) => itmInner.BoekNo === this.mergedPreke[i].BoekNo))
      });
    }
    console.log('mergedBoeke: ',this.mergedBoeke);
    for(let i=0; i < this.mergedBoeke.length; i++) {
      this.mergedBronne.push({
        ...this.mergedBoeke[i],
        ...(this.bronne.find((itmInner : any) => itmInner.BronNo === this.mergedBoeke[i].Bron))
      });
    }
    console.log('mergedBronne: ',this.mergedBronne);

    if (this.filters.bron != 'Als' || this.filters.taal != 'Als' || this.filters.id != '' || this.filters.tema != '' || this.filters.teksopsie != 'Als'){
      if (this.filters.taal != 'Als') {
        this.preke = this.preke.filter( (p : any) => p.taal === this.filters.taal);
      }
      if (this.filters.teksopsie != 'Als') {
        this.preke = this.preke.filter( (p : any) => p.teksopsie === this.filters.teksopsie);
      }
      if (this.filters.bron != 'Als') {
        this.preke = this.preke.filter( (p : any) => p.bron === this.filters.bron);
      }
      if (this.filters.id != '') {
        this.preke = this.preke.filter( (p : any) => Number(p.id) === Number(this.filters.id));
      }      
      if (this.filters.tema != '') {
        let regex = new RegExp(this.filters.tema);
        this.preke = this.preke.filter( (p : any) => regex.test(p.tema));
      }
    }
    this.preke = this.preke.filter( (p : any) => Number(p.preekdatum) >=  Number(this.filters.begin));
    this.preke = this.preke.filter( (p : any) => Number(p.preekdatum) <=  Number(this.filters.eind));
    this.prekeCount = this.mergedBronne.length;
    
    let PREKE = this.preke;
    let BOEKE = this.boeke;
    let tmpPreke : any = [];

    PREKE.forEach(function (p : any) {
      p.boek = [];
      p.testament = 'Undefined';
      BOEKE.forEach(function (b : any){
        let matchedCounter = 0;
        if (b.preek === p.id){
          if (matchedCounter === 0){
            p.testament = b.testament;
          }
          p.boek.push(b.boek);
          matchedCounter ++;
        }
      })
      tmpPreke.push(p);
    });
    this.preke = tmpPreke;
    console.log('preke: ',PREKE);
    this.loading = false;
  }


  retrieveTekste(): void {
    this.teksteService.getAll()
      .subscribe(
        data => {
          this.tekste = data;
          console.log('tekste: ',data);
          this.filterPreke();
        },
        error => {
          console.log(error);
        });
  }

  retrieveBronne(): void {
    this.bronneService.getAll()
      .subscribe(
        data => {
          this.bronne = data;
	  console.log('bronne: ',data);
          this.retrieveTekste();
        },
        error => {
          console.log(error);
        });
  }

  retrieveBoeke(): void {
    this.bybelBoekeService.getAll()
      .subscribe(
        data => {
          this.boeke = data;
	  console.log('boeke: ',data);
          this.outestament = this.boeke.filter((a : any)=>{if(a.OT_NT_BEL=='Ou Testament'){return a}});
          this.nuwetestament = this.boeke.filter((a : any)=>{if(a.OT_NT_BEL=='Nuwe Testament'){return a}});
          this.belydenisse = this.boeke.filter((a : any)=>{if(a.OT_NT_BEL=='Belydenisse'){return a}});
          this.retrieveBronne();
        },
        error => {
          console.log(error);
        });
  }

  retrievePreke(): void {
    this.prekeService.getAll()
      .subscribe(
        data => {
          this.preke = data;
          console.log('preke: ',data);
          this.retrieveBoeke();
        },
        error => {
          console.log(error);
        });
  }

  onTableDataChange(event: any) {
    this.page = event;
    this.retrievePreke();
  }

  openDialog(enkelePreek : any) {
    let dialogRef = this.dialog.open(ExampleDialogComponent, {
      width: '500px',
      data: enkelePreek
    });
  
    console.log(enkelePreek);
  }

  checkAllOldTestament(){
    console.log('Check all old testament');
  }

  checkAllNewTestament(){
    console.log('Check all new testament');
  }

  checkAllConfessions(){
    console.log('Check all confessions');
  }
}
